# NOTE: update this with your service name
service: lottoanalyzer-backend
# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
#  - serverless-plugin-typescript
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-2
  environment:
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-watch
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  bundle:
    # sourcemaps: true      # Enable source maps
    # caching: true         # Enable Webpack caching
    # stats: false          # Don't print out any Webpack output
    linting: false         # Enable linting as a part of the build process
    # copyFiles:            # Copy any additional files to the generated package
    #   - from: 'public/*'    # Where the files are currently
    #     to: './'            # Where in the package should they go
  # STAGE: ${self:provider.stage}
  # DB_CONFIG: ${file(./config/config.js):DB_CONFIG}

functions:
  getData: 
    handler: handler.getData
    events:
      - http:
          path: getData
          method: get
  putNumber:
    handler: handler.putNumber
    events:
      - http:
          path: putNumber
          method: post
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  set:
    handler: handler.setLottoNumber
    events:
      - http:
          path: setLottoNumber
          method: post
  # getAll:
  #   handler: getAll.getAll
  #   events:
  #     - http:
  #         path: getAll
  #         method: post
  #         cors: false
  # create:
  #   handler: create.create
  #   events:
  #     - http:
  #         path: todos
  #         method: post
  #         cors: false

  # list:
  #   handler: todos/list.list
  #   events:
  #     - http:
  #         path: todos
  #         method: get
  #         cors: true

  # get:
  #   handler: get.get
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: get
  #         cors: false

  # update:
  #   handler: todos/update.update
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: put
  #         cors: true

  # delete:
  #   handler: todos/delete.delete
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: delete
  #         cors: true
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH

        #BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    # TodosDynamoDbTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: Lotto